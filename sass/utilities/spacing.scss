@import "../variables.scss";
@import "../helper.scss";


//padding and margin
@mixin generateMarginAndPadding($deviceSize: "") {

    @each $prop, $abrr in (margin: m, padding: p) {
        @each $direction, $directionAbbr in $directions {
            @each $space, $value in $spacers {
                $spacer: "-";
                @if $direction == "" {
                    $spacer: ""
                }
    
                .#{$suffix}#{$abrr}#{$directionAbbr}#{$deviceSize}-#{$space} {
                    #{$prop}#{$spacer + $direction}: $value !important;
                }
            }
        }
    }

}


//negative margin (Eg: m-mr-n1 instead of m-mr-1)
@mixin generateNegativeMargin($deviceSize: "") {

    @each $direction, $directionAbbr in $directions {
        @each $space, $value in $spacers {
            @if $value != 0 {
                $spacer: "-";
                @if $direction == "" {
                    $spacer: ""
                }

                .#{$suffix}m#{$directionAbbr}#{$deviceSize}-n#{$space} {
                    margin#{$spacer + $direction}: -$value !important;
                }
            }
        }
    }

}


@include generateMarginAndPadding;
@include generateNegativeMargin;
// @include for-sm-up {
//     @include generateMarginAndPadding("-sm");
// }
// @include for-md-up {
//     @include generateMarginAndPadding("-md");
// }
// @include for-lg-up {
//     @include generateMarginAndPadding("-lg");
// }
// @include for-xl-up {
//     @include generateMarginAndPadding("-xl");
// }


//some spacial margin
.#{$suffix}m-auto {
    margin: auto !important;
}
.#{$suffix}mt-auto,
.#{$suffix}my-auto {
    margin-top: auto !important;
}
.#{$suffix}mr-auto,
.#{$suffix}mx-auto {
    margin-right: auto !important;
}
.#{$suffix}mb-auto,
.#{$suffix}my-auto {
    margin-bottom: auto !important;
}
.#{$suffix}ml-auto,
.#{$suffix}mx-auto {
    margin-left: auto !important;
}